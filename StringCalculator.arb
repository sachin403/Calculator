  #  1.string of comma-separated numbers Output: an integer, sum of the numbers

class StringCalculator

  def add(numbers)
    return 0 if numbers.empty?
    numbers.split(',').map(&:to_i).reduce(0, :+)
  end
end

# 2.Allow the add method to handle any amount of numbers.

 class StringCalculator
      def add(numbers)
        return 0 if numbers.empty?
        numbers.split(',').map(&:to_i).reduce(0, :+)
      end
 end

 # 3.Allow the add method to handle new lines between numbers (instead of commas). ("1\n2,3" should return 6)

class StringCalculator
      def add(numbers)
       return 0 if numbers.empty?
       numbers.split(/,|\n/).map(&:to_i).reduce(0, :+)
      end
 end

# Test Cases step-1
def setup
    @calculator = StringCalculator.new
end

def empty_string
    assert_equal 0, @calculator.add("")
end

def one_number
    assert_equal 1, @calculator.add("1")
end

def two_numbers
    assert_equal 6, @calculator.add("1,5")
end

#Test Case for Step-2

def multiple_numbers
        assert_equal 9, @calculator.add("1,3,5")
end

#Test Case for step-3

def new_lines_between_numbers
  assert_equal 6, @calculator.add("1\n2,3")
end